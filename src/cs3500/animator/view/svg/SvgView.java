package cs3500.animator.view.svg;

import cs3500.animator.view.IView;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import model.ISimpleAnimationModel;
import model.direction.IDirection;
import model.shape.IShape;

/**
 * The class for implementing SVG view. The main methods are toString and render. the methods all
 * are responsible in formatting the data from model to SVG format.
 */
public class SvgView implements IView {

  protected ISimpleAnimationModel model;
  protected int frameRate;
  private int width;
  private int height;
  private boolean initialized;
  private Appendable out = System.out;

  /**
   * Creates an instance of an SvgView whose purpose is to generate an SVG representation of the
   * given model.
   */
  public SvgView() {
    this.initialized = false;
  }

  /**
   * The same constructor as above, except here we have a defined output, rather than just System
   * out.
   *
   * @param ap Where we should output to in our render function.
   */
  public SvgView(Appendable ap) {
    this();
    this.out = ap;
  }

  /**
   * Converts the actions specified in the model into an svg file.
   *
   * @return a representation of the model in the svg file format.
   */
  public String toString(ISimpleAnimationModel model) {
    if (!this.initialized) {
      throw new IllegalStateException("View is not initialized.");
    }

    this.model = model;

    model.initializeAnimation();

    Map<String, List<IDirection>> directions = model.getDirections();
    List<IShape> shapes = model.getShapes();
    StringBuilder builder = new StringBuilder();

    builder.append(String.format("<svg width=\"%s\" height=\"%s\">\n", width, height));

    for (IShape shape : shapes) {
      builder.append(svgShapeHelper(shape.getName(), directions.get(shape.getName())));
    }

    builder.append("</svg>");

    return builder.toString();
  }

  /**
   * Takes the string representation of an SVG that is generated by toString and appends it to our
   * output location.
   */
  @Override
  public void render(ISimpleAnimationModel model) {
    if (!this.initialized) {
      throw new IllegalStateException("View is not initialized.");
    }

    try {
      this.out.append(this.toString(model));
    } catch (IOException e) {
      throw new IllegalStateException("Unable to output.");
    }
  }

  @Override
  public void initialize(int width, int height, int frameRate) {
    this.width = width;
    this.height = height;
    this.frameRate = frameRate;
    this.initialized = true;
  }

  /**
   * Converts all directions of a shape into lines of SVG output based on the type of direction.
   *
   * @param shapeName  The shape in the model we're outputting to SVG.
   * @param directions The directions that correspond with this shape.
   * @return The SVG representation of this shape and its directions as a string.
   */
  protected String svgShapeHelper(String shapeName, List<IDirection> directions) {
    StringBuilder builder = new StringBuilder();

    for (int i = 0; i < directions.size(); i++) {
      IDirection direction = directions.get(i);
      IShape shape = getShape(model, shapeName, direction.getStartFrame());
      SvgAbstractShape shapeClass = SvgUtils.getShapeClass().get(shape.getShapeType());
      if (shapeClass == null) {
        throw new IllegalArgumentException("Unrecognized Shape");
      }

      if (i == 0 && directions.size() > 1) {
        builder.append(shapeClass.svgCreate(shape, direction));
        if (direction.getStartFrame() != 0) {
          builder.append(String.format("<animate attributeName=\"visibility\" "
                  + "begin=\"0s\" dur=\"%fs\" from=\"hidden\" to=\"visible\" fill=\"freeze\" />\n",
              (directions.get(1).getStartFrame() / (double) frameRate)));
        }

        continue;
      }
      builder.append(svgDirectionHelper(shapeName, direction));
    }

    if (directions.size() > 0) {
      String endTag = Objects.requireNonNull(SvgUtils.getEndTags()
          .get(model.getShape(shapeName).getShapeType()));
      builder.append(endTag);
    }
    return builder.toString();
  }

  protected IShape getShape(ISimpleAnimationModel model, String shapeName, int frame) {
    return model.getShapeAtFrame(shapeName, frame);
  }

  /**
   * Converts a direction of a shape into lines of SVG output based on the type of direction.
   *
   * @param shapeName The shape in the model we're outputting to SVG.
   * @param direction The direction that correspond with this shape.
   * @return The SVG representation of this shape and its direction as a string.
   */
  String svgDirectionHelper(String shapeName, IDirection direction) {
    if (direction.getType().equals("STALL")) {
      return "";
    }

    StringBuilder builder = new StringBuilder();
    IShape startShape = getShape(model, shapeName, direction.getStartFrame() - 1);
    IShape endShape = getShape(model, shapeName, direction.getEndFrame() - 1);

    int str = direction.getStartFrame();
    int end = direction.getEndFrame();

    SvgAbstractShape shapeClass = Objects.requireNonNull(
        SvgUtils.getShapeClass().get(startShape.getShapeType()), "Unrecognized shape");

    Map<String, String[]> attributes = shapeClass.getAttributes();
    String[] attrs = Objects.requireNonNull(
        attributes.get(direction.getType()), "Unrecognized direction");

    Map<String, Integer[]> args = shapeClass.getArgs(startShape, endShape);
    builder.append(svgFormat(attrs[0], str, end, args.get(attrs[0])));
    if (attrs.length == 2) {
      builder.append(svgFormat(attrs[1], str, end, args.get(attrs[1])));
    }

    return builder.toString();
  }

  /**
   * Formats the string as an SVG command.
   *
   * @param attribute Attribute that is being modified.
   * @param str       Start frame.
   * @param end       End frame.
   * @param args      All the arguments involved in modification. Either 2 or 6 (for colors).
   * @return Formatted SVG commands.
   */
  String svgFormat(String attribute, int str, int end, Integer... args) {
    String from = Integer.toString(args[0]);
    String to = Integer.toString(args[1]);
    if (attribute.equals("fill")) {
      from = String.format("rgb(%s %s %s)", args[0], args[1], args[2]);
      to = String.format("rgb(%s %s %s)", args[3], args[4], args[5]);
    }
    return
        String.format("<animate attributeName=\"%s\" begin=\"%ss\" "
                + "dur=\"%ss\" fill=\"freeze\" from=\"%s\" to=\"%s\" />", attribute,
            (str / (double) frameRate), ((end - str) / (double) frameRate),
            from, to) + "\n";
  }
}
